# DFF -- An Open Source Digital Forensics Framework
# Copyright (C) 2009-2011 ArxSys
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2. See the LICENSE file
# at the top of the source tree.
#  
# See http://www.digital-forensic.org for more information about this
# project. Please do not directly contact any of the maintainers of
# DFF for assistance; the project provides a web site, mailing lists
# and IRC channels for your use.
# 
# Author(s):
#  Solal Jacob <sja@digital-forensic.org>
# 

from api.vfs import *
from api.env import *
from api.loader import *
from api.module.module import *
from api.module.script import *

class FILEINFO(Script): 
  def __init__(self):
      Script.__init__(self, "fileinfo")

  def start(self, args):
    buff = ""
    node = args.get_node("file")
    buff += self.fillBase(node)
    buff += self.fillAttributes(node) 
    self.res.add_const("result", buff)

  def fillBase(self, node):
    buff = ""
    fsobj = node.fsobj()
    fsobjname = ""
    if fsobj != None:
      fsobjname = fsobj.name
    buff += "name :\t\t\t" + str(node.name()) + "\n"
    buff += "node type :\t\t" 
    if node.isFile():
      buff += "file"
      if node.hasChildren():
        buff += " " + "with module(s) applied on it"
    if node.isDir():
      buff += "folder"
      if not node.hasChildren():
        buff += " " + "empty"
    if node.isDeleted():
      buff += " " + "deleted"
    buff += "\n"    

    buff += self.fillCompatModule(node)
    if node.hasChildren():
      buff += self.fillChildren(node)

    buff += "generated by:\t\t"
    buff += fsobjname + "\n"
    
    buff += "size:\t\t\t"
    buff += str(node.size())
    buff += "\n"
    return buff

  def fillCompatModule(self, node):
    buff = ""
    l = node.compatibleModules()
    if len(l) > 0:
      buff += "relevant module(s) :\t"
      for i in l:
        buff += str(i) + " " 
    buff += "\n"
    return buff

  def fillChildren(self, node): 
    buff = "children\t\t"
    children = node.children()
    filessize = 0
    filecount = 0
    dircount = 0
    for child in children:
      if child.size():
        filessize += child.size()
        filecount += 1
      elif child.isDir() or child.hasChildren():
        dircount += 1
    if filecount > 0:
      buff += "file(s)"
      buff += str(filecount) + " totalizing " + str(filessize) + " bytes\n"
    if dircount > 0:
      buff += "folder(s) "
      buff += str(dircount) + "\n"
    return buff

  def fillAttributes(self, node):
    buff = ""
    map = node.attributes()
    map.thisown = False
    if len(map) > 0:
      buff += "attributes:\n"
      for key, value in map.iteritems():
        buff +=  str(key) + " :\t\t\t"
        if str(type(value)).find("Variant") != -1:
          if str(type(value.value())).find("VMap") != -1:
	    buff += "\n"
            buff += self.fillMap(value.value())
          elif str(type(value.value())).find("VList") != -1:
            buff += "\n"
            buff += self.fillList(value.value())
          elif str(value).find("vtime") != -1:
            buff += (value.value().get_time()) +"\n"
          else:
            buff += str(value) +"\n"
        else:
          if str(value).find("vtime") != -1:
            buff += str(value.value().get_time()) + "\n"
          else:
            buff += str(value) + "\n"
    return buff

  def fillMap(self, map):
    buff = ""
    for key, value in map.iteritems():
      buff += str(key) + " :\t\t"
      if len(key) < 6:
	 buff += "\t"
      if str(type(value)).find("Variant") != -1:
        if str(type(value.value())).find("VMap") != -1:
          buff += self.fillMap(value.value())
	  buff += "\n"
        elif str(type(value.value())).find("VList") != -1:
	  buff += "\n"
          buff += self.fillList(value.value())
        elif str(value).find("vtime") != -1:
          buff += str(value.value().get_time())
        else:
          buff += str(value)
      else:
        if str(value).find("vtime") != -1:
          buff += str(value.value().get_time())
        else:
          buff += str(value)
      buff += "\n"
    return buff

  def fillList(self, list):
    buff = "\t\t\t"
    for i in list:
      if str(i).find("vtime") != -1:
        buff += str(i.value().get_time()) + "\n\t\t\t"
      else:
        buff += str(i) + "\n\t\t\t"
    return buff

class fileinfo(Module):
  """Display file attribute informations. (size, MAC time, ...)"""
  def __init__(self):
    Module.__init__(self, "fileinfo",  FILEINFO)
    self.conf.add("file", "node", False, "File where info is searched.")
    self.tags = "builtins"
