Release Notes 
=============

Detailed description of changes are available in the CHANGES.current and
CHANGES files. The summary below contains just a brief overview of the changes
made in each release.

DFF-1.0.0 summary:

Features: 
---------

* Windows registry parsing: This create a nodes tree for each key of a windows
registry hive file. Each node have registry values in its attributes (Creation
time, data value, ...).

* VMware VMDK reconstruction: This module reconstruct a volume from a vmdk
file, it will reconstruct the base volume and the snapshots.

* MetaExif: EXIF informations can now be added as node attributes. The
metaexif module uses the dynamic attributes feature of the API so it consumes
few memory.

* Timeline: Constructs a graphical timeline generated from each timestamp
attribute found in nodes (i.e. if you have applied NTFS, registry and
metaexif modules, the timeline will be drawn from MAC times of NTFS, creation
time of Windows registry and EXIF accessed and changed times). Once the
timeline is drawn you can zoom on a date range and then export all founded
nodes for this range of time.

* Translation: DFF GUI can now be hot-translated (no need to relaunch the app
to use selected language). Also most widget have been recreated using
QtDesigner.

* Column dynamic filtering: In the table-view of DFF node browser you can now
add as many column as you want. Columns that can be added correspond to each
attribute present in a node. So you can sort on any time attribute, size,
deleted, or any other attribute.

* Carver: You now have the posibility to add your own header in the carver.
Also, the carver can now be launched in console.

* Merge: The merge module now takes a list of node as input. So you can
virtually merge as many files you need. For example, you can merge all files
from DD images split and then apply other modules to the virtually
reconstructed image.

* Enhanced GUI ergonomy;
 - Sort speed and display greatly enhanced.
 - Fast display of large number of items (> 100 000).
 - The GUI now has maximize and fullscreen buttons, to display widget on the
entire screen.
 - A new menu: relevant module, helps you for a fast access to the guessed
module to apply on a node.
 - A new menu: open as new tab, creates a new browser opened from the node you
clicked on.
 - Each module now has an associated icon.
 - When you double-click on a node to auto-apply a module, a question will now
ask you if you are sure wanting to apply the detected module.
 - The apply module widget were totally rewritten to use the libtype API
(Config and argument of a module).

* Configuration: DFF now as a configuration file, allowing to setup your
favorite language, setting the path where history file will be saved and
setting the path to the help documention.

* IDE update: IDE templates has been updated. The IDE syntax highlighter has
been rewritten and does not use QScintilla anymore.

* Versioning: Each library of the API and each module now has his own version
number, allowing easy maintainability and upgrade.

* API:
 - The config/argument and result class were totally rewritten based on
Variant.
 - Attributes are now fully based on Variant. Also modules can now adds dynamic
attributes to use less memory.
 - Data-type and compatible modules are now accessible directly from a node
object.
 - Old file-type API is replaced by the new data-type engine where you can
plug your own data-type detection handler.

* Hash module:
Hash can now be done directly with several algorithm (md5, sha1, sha256, ...)
and uses the new dynamic attributes API to add hash as node attributes. It uses
the post-processing feature.

Bug fixes:
----------

* ExtFs: Checks magic of number of Inodes to avoid crash on crafted or damaged
data.

* Hex viewer pixel view: Fixes some crash when underlaying read did not returns
requested number of bytes.
