# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
libenv: classes in this module are used to manage the environment of the modules,
such as parameters and options they can take and results they can generate.
"""

from sys import version_info

class v_key(object):
    """1"""
    def __init__(self): 
        """
        __init__(self) -> v_key

        1
        """

    def add_var_descr(self, *args):
        """
        add_var_descr(self, v_descr v)

        1
        """
        return _libenv.v_key_add_var_descr(self, *args)

    def add_var_val(self, *args):
        """
        add_var_val(self, v_val v)

        1
        """
        return _libenv.v_key_add_var_val(self, *args)


class env(object):
    """
    This singleton class contains a map of all key by name.

    """
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    def Get():
        """
        Get() -> env

        """
        return _libenv.env_Get()

    Get = staticmethod(Get)
    def add_var_descr(self, *args):
        """
        add_var_descr(self, v_descr v)

        """
        return _libenv.env_add_var_descr(self, *args)

    def add_var_val(self, *args):
        """
        add_var_val(self, v_val v)

        """
        return _libenv.env_add_var_val(self, *args)

def env_Get():
  """
    env_Get() -> env

    """
  return _libenv.env_Get()

class vars(object):
    """
    There must be one instance of this class for each parameters the module can take.

    In other word, if the method add\(\) from the class \`config\` is called three times for
    the module \`foo\` (i.e. if the module \`foo\` can take three arguments), there will be
    three instances of the \`vars\` class, used to store the different attributes composing
    the argument :
        * name : the name of the parameter (`\-\-file` for example)
        * description : the description of the parameter
        * type : the type of the parameter
        * from : which module can use this parameter
        * optional : \`true\` if the parameter is optional, \`false\` otherwise.

    """

    def __init__(self): 
        """
        __init__(self) -> vars

        """
        _libenv.vars_swiginit(self,_libenv.new_vars())

class v_descr(vars):
    """1"""

    def __init__(self): 
        """
        __init__(self) -> v_descr

        1
        """
        _libenv.v_descr_swiginit(self,_libenv.new_v_descr())

class v_descr_int(v_descr):
    """1"""

    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_int
        __init__(self, string f, string n, int x, int y, bool opt, string description) -> v_descr_int

        1
        """
        _libenv.v_descr_int_swiginit(self,_libenv.new_v_descr_int(*args))
    def check_val(self, *args):
        """
        check_val(self, int v) -> int

        1
        """
        return _libenv.v_descr_int_check_val(self, *args)

class v_descr_uint64(v_descr):
    """1"""

    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_uint64

        1
        """
class v_descr_string(v_descr):
    """1"""

    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_string

        1
        """


class v_descr_bool(v_descr):
    """1"""
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_bool

        1
        """
        _libenv.v_descr_bool_swiginit(self,_libenv.new_v_descr_bool(*args))

class v_descr_path(v_descr):
    """1"""
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_path

        1
        """

class v_descr_node(v_descr):
    """1"""

    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_node

        1
        """

class v_descr_lnode(v_descr):
    """1"""
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_lnode

        1
        """

class v_val(vars):
    """1"""

    def get_int(self):
        """
        get_int(self) -> int

        1
        """
        return _libenv.v_val_get_int(self)

    def get_uint64(self):
        """
        get_uint64(self) -> uint64_t

        1
        """
        return _libenv.v_val_get_uint64(self)

    def get_string(self):
        """
        get_string(self) -> string

        1
        """
        return _libenv.v_val_get_string(self)

    def get_node(self):
        """
        get_node(self) -> Node

        1
        """
        return _libenv.v_val_get_node(self)

    def get_path(self):
        """
        get_path(self) -> Path

        1
        """
        return _libenv.v_val_get_path(self)

    def get_bool(self):
        """
        get_bool(self) -> bool

        1
        """
        return _libenv.v_val_get_bool(self)

    def get_lnode(self):
        """
        get_lnode(self) -> ListNode

        1
        """
        return _libenv.v_val_get_lnode(self)

    def __init__(self): 
        """
        __init__(self) -> v_val

        1
        """
        _libenv.v_val_swiginit(self,_libenv.new_v_val())

class v_val_int(v_val):
    """1"""
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, int v) -> v_val_int

        1
        """

class v_val_uint64(v_val):
    """1"""

    def __init__(self, *args): 
        """
        __init__(self, string f, string n, uint64_t v) -> v_val_uint64

        1
        """

class v_val_string(v_val):
    """1"""
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, string v) -> v_val_string

        1
        """

class v_val_bool(v_val):
    """1"""

    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool v) -> v_val_bool

        1
        """
        _libenv.v_val_bool_swiginit(self,_libenv.new_v_val_bool(*args))

class v_val_node(v_val):
    """1"""

    def __init__(self, *args): 
        """
        __init__(self, string f, string n, Node v) -> v_val_node

        1
        """
        _libenv.v_val_node_swiginit(self,_libenv.new_v_val_node(*args))

class v_val_path(v_val):
    """1"""
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, Path v) -> v_val_path

        1
        """

class v_val_lnode(v_val):
    """1"""

    def __init__(self, *args): 
        """
        __init__(self, string f, string n, ListNode v) -> v_val_lnode

        1
        """
        _libenv.v_val_lnode_swiginit(self,_libenv.new_v_val_lnode(*args))

class config(object):
    """
    The config class is used for the configuration of a module. By configuration we
    mean the arguments passed to a module, in command line or through the GUI.

    This class is not used to get the arguments a user passed to a module, but to define a list of arguments
    the module can use. One instance of the config class is required by module.

    Let\'s take for example the `cat` viewer module (displayin the content of a Node). The viewer displays
    a given node, so it needs to know the path to what node, consequently users will have to pass at least one argument
    to cat. The config class is designed to \"tell\" the cat viewer, that one argument is required for him
    to run. Without it, the viewer will return an error and stop.
  
    All the possible arguments a module are stored into a list and then can be accessed from the module
    when this one is running. For example, when you use the module `md5`, one argument
    (a path to a file) is required : you will have to add the line add()
    
       add("\-\-file", "Path", False, "The path to the file")
    
    In the previous example it indicates to the module that the parameter `\-\-file` is
    of type `Path` is mandatory (if it is not present, the module will stop). The last
    parameter is a description and is optional.
    
    Different types of parameters can be used, defined be the second parameter of the
    add method.
    
    Some constant configuration values can be added, such as the mime-type the module
    is supposed to handle (extfs, picture, etc) by calling the method :
    
       add_const("name", value)
    
    where` name` is the name of the constant and `value` its value (one more time, different
    types are handled; see the documentation of the `add_const` method).

    """

    def __init__(self, *args): 
        """
        __init__(self, string _from) -> config
        
        Constructor.

        Params :
               * _from : the name of the module.

        """
        _libenv.config_swiginit(self,_libenv.new_config(*args))

    def add(self, *args):
        """
        add(self, string name, string type, bool opt = False, string descr = "")
        add(self, string name, string type, bool opt = False)
        add(self, string name, string type)
        add(self, string name, string type, int min, int max, bool opt = False, string descr = "")
        add(self, string name, string type, int min, int max, bool opt = False)
        add(self, string name, string type, int min, int max)

        Add an argument to the argument list.

        By default, the list of parameters the module can take is empty. This is
        up to the modules developer to fill a list up of possible arguments. This can be done by using
        the `add` method. Each call to this method will add a new possible arguments to the list. The name
        of the argument is defined by the first parameter `name`, the second arguement of add defines
        a type.
        
        For example, if you call :

                add(\"\-\-file\", \"Path\", \"True\", \"Some example arg\")\;

        for the module `foo`, it means that it can be invoked in DFF command line interface like this :

                dff \/> foo \-\-file Path/to/a/node
        
        In this examplem we set the `opt` parameter of the add method to True so this parameter is not required
        by the module (i.e. it is optional).
       
        Then in the module itself you can get the arguments which were passed to them (see the fso and mfso start methods).

        It means that your module will require an argument called \-\-file which is of type Path (a path
        to a file). By default, this argument will be necesaary of the module will return an error. To use
        optional parameter you must use the third arguments of `add` and set it to `True`

        The fourth argument of add is also optional and is a description, by default an empty string.

        Params :
                * name : the name of the argument (`\-\-file` for example) you want to add on the list
                * type : the type of the argument
                * opt : must be True if the arguments is optional, False otherwise. Is set to False by default.
                * descr : description of the arguments. Is empty by default.
               
        """
        return _libenv.config_add(self, *args)

    def add_const(self, *args):
        """
        add_const(self, string name, string val)
        add_const(self, string name, bool val)
        add_const(self, string name, int val)
        add_const(self, string name, uint64_t val)
        add_const(self, string name, Node val)
        add_const(self, string name, Path val)
        add_const(self, string name, ListNode val)

        The add_const method is used to pass some constant configurations values to a module. Different type can be used.

        Params :
                * name : the name of the constant parameter.
                * val : the value of the constant parameter.
        """
        return _libenv.config_add_const(self, *args)

class argument(object):
    """
    The list of arguments which are passed to a module.

    This class is defferent from the config class. It contains a list of all parameters
    passed by a user to a module. If a module is called as on the following line :

      mod \-\-arg1 val1 \-\-arg2 val2

    it is necessary that these two arguments can be retrieved by the module once it is running. They are
    stored within a list accessible through the `get` method of the argument class. See the documentation
    of this method for more details.
    """

    def __init__(self, *args): 
        """
        __init__(self, string who) -> argument
        __init__(self) -> argument

        The list of arguments which are passed to a module.

        """
        _libenv.argument_swiginit(self,_libenv.new_argument(*args))
    def add_int(self, *args):
        """
        add_int(self, string arg0, int arg1)

        1
        """
        return _libenv.argument_add_int(self, *args)

    def add_uint64(self, *args):
        """
        add_uint64(self, string arg0, uint64_t arg1)

        1
        """
        return _libenv.argument_add_uint64(self, *args)

    def add_string(self, *args):
        """
        add_string(self, string arg0, string arg1)

        1
        """
        return _libenv.argument_add_string(self, *args)

    def add_bool(self, *args):
        """
        add_bool(self, string arg0, bool arg1)

        1
        """
        return _libenv.argument_add_bool(self, *args)

    def add_node(self, *args):
        """
        add_node(self, string arg0, Node arg1)

        1
        """
        return _libenv.argument_add_node(self, *args)

    def add_path(self, *args):
        """
        add_path(self, string arg0, string arg1)

        1
        """
        return _libenv.argument_add_path(self, *args)

    def add_lnode(self, *args):
        """
        add_lnode(self, string arg0, ListNode arg1)

        1
        """
        return _libenv.argument_add_lnode(self, *args)

    def get(self, *args):
        """
        get(self, string name, int v)
        get(self, string name, uint64_t v)
        get(self, string name, bool v)
        get(self, string name, Node v)
        get(self, string name, string v)
        get(self, string name, Path v)
        get(self, string name, ListNode v)

        Get the arguments which were passed to the module when it was launched. The first argument you will
        need to get is typically the parent Node of your module (i.e. the node from which the module will buidl
        its tree view). The `args` parameter contains the entire list of all the module's parameters.

        It can be done like this :

          args\-\>get(\"arg_name\", &variable)\;

        where `arg_name` is the name of the argument you want to get and `variable` the buffer where you want to store
        the value of the argument. As far as they are several types of arguments, the get method can also take several type
        of arguments.

        Params :
                * name : the name of the argument you want to get
                * v : the address of the variable in which you want to store the value corresponding to the parameter name.

        """
        return _libenv.argument_get(self, *args)

    def get_int(self, *args):
        """
        get_int(self, string name) -> int

        1
        """
        return _libenv.argument_get_int(self, *args)

    def get_uint64(self, *args):
        """
        get_uint64(self, string name) -> uint64_t

        1
        """
        return _libenv.argument_get_uint64(self, *args)

    def get_bool(self, *args):
        """
        get_bool(self, string name) -> bool

        1
        """
        return _libenv.argument_get_bool(self, *args)

    def get_string(self, *args):
        """
        get_string(self, string name) -> string

        1
        """
        return _libenv.argument_get_string(self, *args)

    def get_node(self, *args):
        """
        get_node(self, string name) -> Node

        1
        """
        return _libenv.argument_get_node(self, *args)

    def get_path(self, *args):
        """
        get_path(self, string name) -> Path

        1
        """
        return _libenv.argument_get_path(self, *args)

    def get_lnode(self, *args):
        """
        get_lnode(self, string name) -> ListNode

        1
        """
        return _libenv.argument_get_lnode(self, *args)


class results(argument):
    """
    This class, inheriting the `argument` class, is used to store the result of the
    execution of a module.


    The method add_const inherited from argument must be used to set resu
    """

    def __init__(self, *args): 
        """
        __init__(self, string who) -> results

        Constructor.

        Params :
                * who : the name of the module (is used by the argument class constructor)
        """
        _libenv.results_swiginit(self,_libenv.new_results(*args))
    def add_const(self, *args):
        """
        add_const(self, string name, string val)
        add_const(self, string name, int val)
        add_const(self, string name, uint64_t val)
        add_const(self, string name, Node val)
        add_const(self, string name, Path val)
        add_const(self, string name, ListNode val)

        Add a result to the the results list. Notice that the type of the result can be chosen by the caller.
        
        Params :
                * name : the name of the result.
                * val : the value of the parameter.
        """
        return _libenv.results_add_const(self, *args)

class ListDescr(object):
    """1"""

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.ListDescr_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.ListDescr___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.ListDescr___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.ListDescr___len__(self)

    def pop(self):
        """
        pop(self) -> value_type

        1
        """
        return _libenv.ListDescr_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> ListDescr

        1
        """
        return _libenv.ListDescr___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, ListDescr v)

        1
        """
        return _libenv.ListDescr___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)

        1
        """
        return _libenv.ListDescr___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)

        1
        """
        return _libenv.ListDescr___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ListDescr
        __getitem__(self, difference_type i) -> value_type

        1
        """
        return _libenv.ListDescr___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ListDescr v)
        __setitem__(self, difference_type i, value_type x)

        1
        """
        return _libenv.ListDescr___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)

        1
        """
        return _libenv.ListDescr_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.ListDescr_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.ListDescr_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.ListDescr_clear(self)

    def swap(self, *args):
        """
        swap(self, ListDescr v)

        1
        """
        return _libenv.ListDescr_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.ListDescr_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.ListDescr_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.ListDescr_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListDescr_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListDescr_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        1
        """
        return _libenv.ListDescr_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator

        1
        """
        return _libenv.ListDescr_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ListDescr
        __init__(self, ListDescr arg0) -> ListDescr
        __init__(self, size_type size) -> ListDescr
        __init__(self, size_type size, value_type value) -> ListDescr

        1
        """
        _libenv.ListDescr_swiginit(self,_libenv.new_ListDescr(*args))
    def push_back(self, *args):
        """
        push_back(self, value_type x)

        1
        """
        return _libenv.ListDescr_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type

        1
        """
        return _libenv.ListDescr_front(self)

    def back(self):
        """
        back(self) -> value_type

        1
        """
        return _libenv.ListDescr_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)

        1
        """
        return _libenv.ListDescr_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)

        1
        """
        return _libenv.ListDescr_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)

        1
        """
        return _libenv.ListDescr_insert(self, *args)

    def pop_front(self):
        """
        pop_front(self)

        1
        """
        return _libenv.ListDescr_pop_front(self)

    def push_front(self, *args):
        """
        push_front(self, value_type x)

        1
        """
        return _libenv.ListDescr_push_front(self, *args)

    def remove(self, *args):
        """
        remove(self, value_type x)

        1
        """
        return _libenv.ListDescr_remove(self, *args)

    def unique(self):
        """
        unique(self)

        1
        """
        return _libenv.ListDescr_unique(self)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _libenv.ListDescr_reverse(self)

    def sort(self):
        """
        sort(self)

        1
        """
        return _libenv.ListDescr_sort(self)

    def merge(self, *args):
        """
        merge(self, ListDescr x)

        1
        """
        return _libenv.ListDescr_merge(self, *args)

class MapVal(object):
    """1"""

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapVal_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.MapVal___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.MapVal___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.MapVal___len__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, key_type key) -> mapped_type

        1
        """
        return _libenv.MapVal___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key_type key)

        1
        """
        return _libenv.MapVal___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key_type key) -> bool

        1
        """
        return _libenv.MapVal_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject

        1
        """
        return _libenv.MapVal_keys(self)

    def values(self):
        """
        values(self) -> PyObject

        1
        """
        return _libenv.MapVal_values(self)

    def items(self):
        """
        items(self) -> PyObject

        1
        """
        return _libenv.MapVal_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key_type key) -> bool

        1
        """
        return _libenv.MapVal___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapVal_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapVal_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """
        __setitem__(self, key_type key, mapped_type x)

        1
        """
        return _libenv.MapVal___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(std::string)> arg0) -> MapVal
        __init__(self) -> MapVal
        __init__(self, MapVal arg0) -> MapVal

        1
        """
        _libenv.MapVal_swiginit(self,_libenv.new_MapVal(*args))
    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.MapVal_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.MapVal_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.MapVal_clear(self)

    def swap(self, *args):
        """
        swap(self, MapVal v)

        1
        """
        return _libenv.MapVal_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.MapVal_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.MapVal_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.MapVal_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.MapVal_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.MapVal_rend(self)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type

        1
        """
        return _libenv.MapVal_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)

        1
        """
        return _libenv.MapVal_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator

        1
        """
        return _libenv.MapVal_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator

        1
        """
        return _libenv.MapVal_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator

        1
        """
        return _libenv.MapVal_upper_bound(self, *args)

class ListVal(object):
    """1"""

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.ListVal_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.ListVal___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.ListVal___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.ListVal___len__(self)

    def pop(self):
        """
        pop(self) -> value_type

        1
        """
        return _libenv.ListVal_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> ListVal

        1
        """
        return _libenv.ListVal___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, ListVal v)

        1
        """
        return _libenv.ListVal___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)

        1
        """
        return _libenv.ListVal___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)

        1
        """
        return _libenv.ListVal___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ListVal
        __getitem__(self, difference_type i) -> value_type

        1
        """
        return _libenv.ListVal___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ListVal v)
        __setitem__(self, difference_type i, value_type x)

        1
        """
        return _libenv.ListVal___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)

        1
        """
        return _libenv.ListVal_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.ListVal_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.ListVal_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.ListVal_clear(self)

    def swap(self, *args):
        """
        swap(self, ListVal v)

        1
        """
        return _libenv.ListVal_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.ListVal_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.ListVal_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.ListVal_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListVal_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListVal_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        1
        """
        return _libenv.ListVal_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator

        1
        """
        return _libenv.ListVal_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ListVal
        __init__(self, ListVal arg0) -> ListVal
        __init__(self, size_type size) -> ListVal
        __init__(self, size_type size, value_type value) -> ListVal

        1
        """
        _libenv.ListVal_swiginit(self,_libenv.new_ListVal(*args))
    def push_back(self, *args):
        """
        push_back(self, value_type x)

        1
        """
        return _libenv.ListVal_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type

        1
        """
        return _libenv.ListVal_front(self)

    def back(self):
        """
        back(self) -> value_type

        1
        """
        return _libenv.ListVal_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)

        1
        """
        return _libenv.ListVal_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)

        1
        """
        return _libenv.ListVal_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)

        1
        """
        return _libenv.ListVal_insert(self, *args)

    def pop_front(self):
        """
        pop_front(self)

        1
        """
        return _libenv.ListVal_pop_front(self)

    def push_front(self, *args):
        """
        push_front(self, value_type x)

        1
        """
        return _libenv.ListVal_push_front(self, *args)

    def remove(self, *args):
        """
        remove(self, value_type x)

        1
        """
        return _libenv.ListVal_remove(self, *args)

    def unique(self):
        """
        unique(self)

        1
        """
        return _libenv.ListVal_unique(self)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _libenv.ListVal_reverse(self)

    def sort(self):
        """
        sort(self)

        1
        """
        return _libenv.ListVal_sort(self)

    def merge(self, *args):
        """
        merge(self, ListVal x)

        1
        """
        return _libenv.ListVal_merge(self, *args)


class MapKey(object):
    """1"""

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapKey_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.MapKey___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.MapKey___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.MapKey___len__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, key_type key) -> mapped_type

        1
        """
        return _libenv.MapKey___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key_type key)

        1
        """
        return _libenv.MapKey___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key_type key) -> bool

        1
        """
        return _libenv.MapKey_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject

        1
        """
        return _libenv.MapKey_keys(self)

    def values(self):
        """
        values(self) -> PyObject

        1
        """
        return _libenv.MapKey_values(self)

    def items(self):
        """
        items(self) -> PyObject

        1
        """
        return _libenv.MapKey_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key_type key) -> bool

        1
        """
        return _libenv.MapKey___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapKey_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapKey_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """
        __setitem__(self, key_type key, mapped_type x)

        1
        """
        return _libenv.MapKey___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(std::string)> arg0) -> MapKey
        __init__(self) -> MapKey
        __init__(self, MapKey arg0) -> MapKey

        1
        """
        _libenv.MapKey_swiginit(self,_libenv.new_MapKey(*args))
    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.MapKey_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.MapKey_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.MapKey_clear(self)

    def swap(self, *args):
        """
        swap(self, MapKey v)

        1
        """
        return _libenv.MapKey_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.MapKey_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.MapKey_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.MapKey_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.MapKey_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.MapKey_rend(self)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type

        1
        """
        return _libenv.MapKey_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)

        1
        """
        return _libenv.MapKey_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator

        1
        """
        return _libenv.MapKey_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator

        1
        """
        return _libenv.MapKey_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator

        1
        """
        return _libenv.MapKey_upper_bound(self, *args)


class ListNode(object):
    """1"""

    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.ListNode_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.ListNode___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.ListNode___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.ListNode___len__(self)

    def pop(self):
        """
        pop(self) -> value_type

        1
        """
        return _libenv.ListNode_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> ListNode

        1
        """
        return _libenv.ListNode___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, ListNode v)

        1
        """
        return _libenv.ListNode___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)

        1
        """
        return _libenv.ListNode___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)

        1
        """
        return _libenv.ListNode___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ListNode
        __getitem__(self, difference_type i) -> value_type

        1
        """
        return _libenv.ListNode___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ListNode v)
        __setitem__(self, difference_type i, value_type x)

        1
        """
        return _libenv.ListNode___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)

        1
        """
        return _libenv.ListNode_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.ListNode_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.ListNode_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.ListNode_clear(self)

    def swap(self, *args):
        """
        swap(self, ListNode v)

        1
        """
        return _libenv.ListNode_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.ListNode_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.ListNode_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.ListNode_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListNode_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListNode_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        1
        """
        return _libenv.ListNode_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator

        1
        """
        return _libenv.ListNode_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ListNode
        __init__(self, ListNode arg0) -> ListNode
        __init__(self, size_type size) -> ListNode
        __init__(self, size_type size, value_type value) -> ListNode

        1
        """
        _libenv.ListNode_swiginit(self,_libenv.new_ListNode(*args))
    def push_back(self, *args):
        """
        push_back(self, value_type x)

        1
        """
        return _libenv.ListNode_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type

        1
        """
        return _libenv.ListNode_front(self)

    def back(self):
        """
        back(self) -> value_type

        1
        """
        return _libenv.ListNode_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)

        1
        """
        return _libenv.ListNode_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)

        1
        """
        return _libenv.ListNode_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)

        1
        """
        return _libenv.ListNode_insert(self, *args)

    def pop_front(self):
        """
        pop_front(self)

        1
        """
        return _libenv.ListNode_pop_front(self)

    def push_front(self, *args):
        """
        push_front(self, value_type x)

        1
        """
        return _libenv.ListNode_push_front(self, *args)

    def remove(self, *args):
        """
        remove(self, value_type x)

        1
        """
        return _libenv.ListNode_remove(self, *args)

    def unique(self):
        """
        unique(self)

        1
        """
        return _libenv.ListNode_unique(self)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _libenv.ListNode_reverse(self)

    def sort(self):
        """
        sort(self)

        1
        """
        return _libenv.ListNode_sort(self)

    def merge(self, *args):
        """
        merge(self, ListNode x)

        1
        """
        return _libenv.ListNode_merge(self, *args)
