# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
libenv: classes in this module are used to manage the environment of the modules,
such as parameters and options they can take and results they can generate.
"""

class v_key(object):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> v_key

        1
        """
        _libenv.v_key_swiginit(self,_libenv.new_v_key())
    __swig_destroy__ = _libenv.delete_v_key
    descr_l = _swig_property(_libenv.v_key_descr_l_get, _libenv.v_key_descr_l_set)
    val_l = _swig_property(_libenv.v_key_val_l_get, _libenv.v_key_val_l_set)
    def add_var_descr(self, *args):
        """
        add_var_descr(self, v_descr v)

        1
        """
        return _libenv.v_key_add_var_descr(self, *args)

    def add_var_val(self, *args):
        """
        add_var_val(self, v_val v)

        1
        """
        return _libenv.v_key_add_var_val(self, *args)

v_key.add_var_descr = new_instancemethod(_libenv.v_key_add_var_descr,None,v_key)
v_key.add_var_val = new_instancemethod(_libenv.v_key_add_var_val,None,v_key)
v_key_swigregister = _libenv.v_key_swigregister
v_key_swigregister(v_key)

class env(object):
    """
    This singleton class contains a map of all key by name.

    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    vars_db = _swig_property(_libenv.env_vars_db_get, _libenv.env_vars_db_set)
    def Get():
        """
        Get() -> env

        1
        """
        return _libenv.env_Get()

    Get = staticmethod(Get)
    def add_var_descr(self, *args):
        """
        add_var_descr(self, v_descr v)

        1
        """
        return _libenv.env_add_var_descr(self, *args)

    def add_var_val(self, *args):
        """
        add_var_val(self, v_val v)

        1
        """
        return _libenv.env_add_var_val(self, *args)

env.add_var_descr = new_instancemethod(_libenv.env_add_var_descr,None,env)
env.add_var_val = new_instancemethod(_libenv.env_add_var_val,None,env)
env_swigregister = _libenv.env_swigregister
env_swigregister(env)

def env_Get():
  """
    env_Get() -> env

    1
    """
  return _libenv.env_Get()

class vars(object):
    """
    There must be one instance of this class for each parameters the module can take.

    In other word, if the method add() from the class `config` is called three times for
    the module `foo` (i.e. if the module `foo` can take three arguments), there will be
    three instances of the `vars` class, used to store the different attributes composing
    the argument :
        * name : the name of the parameter (`\-\-file` for example)
        * description : the description of the parameter
        * type : the type of the parameter
        * from : which module can use this parameter
        * optional : `true` if the parameter is optional, `false` otherwise.

    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_libenv.vars_name_get, _libenv.vars_name_set)
    description = _swig_property(_libenv.vars_description_get, _libenv.vars_description_set)
    type = _swig_property(_libenv.vars_type_get, _libenv.vars_type_set)
    _from = _swig_property(_libenv.vars__from_get, _libenv.vars__from_set)
    optional = _swig_property(_libenv.vars_optional_get, _libenv.vars_optional_set)
    def __init__(self): 
        """
        __init__(self) -> vars

        1
        """
        _libenv.vars_swiginit(self,_libenv.new_vars())
    __swig_destroy__ = _libenv.delete_vars
vars_swigregister = _libenv.vars_swigregister
vars_swigregister(vars)

class v_descr(vars):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> v_descr

        1
        """
        _libenv.v_descr_swiginit(self,_libenv.new_v_descr())
    __swig_destroy__ = _libenv.delete_v_descr
v_descr_swigregister = _libenv.v_descr_swigregister
v_descr_swigregister(v_descr)

class v_descr_int(v_descr):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    max = _swig_property(_libenv.v_descr_int_max_get, _libenv.v_descr_int_max_set)
    min = _swig_property(_libenv.v_descr_int_min_get, _libenv.v_descr_int_min_set)
    descr = _swig_property(_libenv.v_descr_int_descr_get, _libenv.v_descr_int_descr_set)
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_int
        __init__(self, string f, string n, int x, int y, bool opt, string description) -> v_descr_int

        1
        """
        _libenv.v_descr_int_swiginit(self,_libenv.new_v_descr_int(*args))
    def check_val(self, *args):
        """
        check_val(self, int v) -> int

        1
        """
        return _libenv.v_descr_int_check_val(self, *args)

    __swig_destroy__ = _libenv.delete_v_descr_int
v_descr_int.check_val = new_instancemethod(_libenv.v_descr_int_check_val,None,v_descr_int)
v_descr_int_swigregister = _libenv.v_descr_int_swigregister
v_descr_int_swigregister(v_descr_int)

class v_descr_uint64(v_descr):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_uint64

        1
        """
        _libenv.v_descr_uint64_swiginit(self,_libenv.new_v_descr_uint64(*args))
    __swig_destroy__ = _libenv.delete_v_descr_uint64
v_descr_uint64_swigregister = _libenv.v_descr_uint64_swigregister
v_descr_uint64_swigregister(v_descr_uint64)

class v_descr_string(v_descr):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_string

        1
        """
        _libenv.v_descr_string_swiginit(self,_libenv.new_v_descr_string(*args))
    __swig_destroy__ = _libenv.delete_v_descr_string
v_descr_string_swigregister = _libenv.v_descr_string_swigregister
v_descr_string_swigregister(v_descr_string)

class v_descr_bool(v_descr):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_bool

        1
        """
        _libenv.v_descr_bool_swiginit(self,_libenv.new_v_descr_bool(*args))
    __swig_destroy__ = _libenv.delete_v_descr_bool
v_descr_bool_swigregister = _libenv.v_descr_bool_swigregister
v_descr_bool_swigregister(v_descr_bool)

class v_descr_path(v_descr):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_path

        1
        """
        _libenv.v_descr_path_swiginit(self,_libenv.new_v_descr_path(*args))
    __swig_destroy__ = _libenv.delete_v_descr_path
v_descr_path_swigregister = _libenv.v_descr_path_swigregister
v_descr_path_swigregister(v_descr_path)

class v_descr_node(v_descr):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_node

        1
        """
        _libenv.v_descr_node_swiginit(self,_libenv.new_v_descr_node(*args))
    __swig_destroy__ = _libenv.delete_v_descr_node
v_descr_node_swigregister = _libenv.v_descr_node_swigregister
v_descr_node_swigregister(v_descr_node)

class v_descr_lnode(v_descr):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool opt, string description) -> v_descr_lnode

        1
        """
        _libenv.v_descr_lnode_swiginit(self,_libenv.new_v_descr_lnode(*args))
    __swig_destroy__ = _libenv.delete_v_descr_lnode
v_descr_lnode_swigregister = _libenv.v_descr_lnode_swigregister
v_descr_lnode_swigregister(v_descr_lnode)

class v_val(vars):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def get_int(self):
        """
        get_int(self) -> int

        1
        """
        return _libenv.v_val_get_int(self)

    def get_uint64(self):
        """
        get_uint64(self) -> uint64_t

        1
        """
        return _libenv.v_val_get_uint64(self)

    def get_string(self):
        """
        get_string(self) -> string

        1
        """
        return _libenv.v_val_get_string(self)

    def get_node(self):
        """
        get_node(self) -> Node

        1
        """
        return _libenv.v_val_get_node(self)

    def get_path(self):
        """
        get_path(self) -> Path

        1
        """
        return _libenv.v_val_get_path(self)

    def get_bool(self):
        """
        get_bool(self) -> bool

        1
        """
        return _libenv.v_val_get_bool(self)

    def get_lnode(self):
        """
        get_lnode(self) -> ListNode

        1
        """
        return _libenv.v_val_get_lnode(self)

    def __init__(self): 
        """
        __init__(self) -> v_val

        1
        """
        _libenv.v_val_swiginit(self,_libenv.new_v_val())
    __swig_destroy__ = _libenv.delete_v_val
v_val.get_int = new_instancemethod(_libenv.v_val_get_int,None,v_val)
v_val.get_uint64 = new_instancemethod(_libenv.v_val_get_uint64,None,v_val)
v_val.get_string = new_instancemethod(_libenv.v_val_get_string,None,v_val)
v_val.get_node = new_instancemethod(_libenv.v_val_get_node,None,v_val)
v_val.get_path = new_instancemethod(_libenv.v_val_get_path,None,v_val)
v_val.get_bool = new_instancemethod(_libenv.v_val_get_bool,None,v_val)
v_val.get_lnode = new_instancemethod(_libenv.v_val_get_lnode,None,v_val)
v_val_swigregister = _libenv.v_val_swigregister
v_val_swigregister(v_val)

class v_val_int(v_val):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_libenv.v_val_int_value_get, _libenv.v_val_int_value_set)
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, int v) -> v_val_int

        1
        """
        _libenv.v_val_int_swiginit(self,_libenv.new_v_val_int(*args))
    __swig_destroy__ = _libenv.delete_v_val_int
v_val_int_swigregister = _libenv.v_val_int_swigregister
v_val_int_swigregister(v_val_int)

class v_val_uint64(v_val):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_libenv.v_val_uint64_value_get, _libenv.v_val_uint64_value_set)
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, uint64_t v) -> v_val_uint64

        1
        """
        _libenv.v_val_uint64_swiginit(self,_libenv.new_v_val_uint64(*args))
    __swig_destroy__ = _libenv.delete_v_val_uint64
v_val_uint64_swigregister = _libenv.v_val_uint64_swigregister
v_val_uint64_swigregister(v_val_uint64)

class v_val_string(v_val):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_libenv.v_val_string_value_get, _libenv.v_val_string_value_set)
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, string v) -> v_val_string

        1
        """
        _libenv.v_val_string_swiginit(self,_libenv.new_v_val_string(*args))
    __swig_destroy__ = _libenv.delete_v_val_string
v_val_string_swigregister = _libenv.v_val_string_swigregister
v_val_string_swigregister(v_val_string)

class v_val_bool(v_val):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_libenv.v_val_bool_value_get, _libenv.v_val_bool_value_set)
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, bool v) -> v_val_bool

        1
        """
        _libenv.v_val_bool_swiginit(self,_libenv.new_v_val_bool(*args))
    __swig_destroy__ = _libenv.delete_v_val_bool
v_val_bool_swigregister = _libenv.v_val_bool_swigregister
v_val_bool_swigregister(v_val_bool)

class v_val_node(v_val):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_libenv.v_val_node_value_get, _libenv.v_val_node_value_set)
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, Node v) -> v_val_node

        1
        """
        _libenv.v_val_node_swiginit(self,_libenv.new_v_val_node(*args))
    __swig_destroy__ = _libenv.delete_v_val_node
v_val_node_swigregister = _libenv.v_val_node_swigregister
v_val_node_swigregister(v_val_node)

class v_val_path(v_val):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_libenv.v_val_path_value_get, _libenv.v_val_path_value_set)
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, Path v) -> v_val_path

        1
        """
        _libenv.v_val_path_swiginit(self,_libenv.new_v_val_path(*args))
    __swig_destroy__ = _libenv.delete_v_val_path
v_val_path_swigregister = _libenv.v_val_path_swigregister
v_val_path_swigregister(v_val_path)

class v_val_lnode(v_val):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_libenv.v_val_lnode_value_get, _libenv.v_val_lnode_value_set)
    def __init__(self, *args): 
        """
        __init__(self, string f, string n, ListNode v) -> v_val_lnode

        1
        """
        _libenv.v_val_lnode_swiginit(self,_libenv.new_v_val_lnode(*args))
    __swig_destroy__ = _libenv.delete_v_val_lnode
v_val_lnode_swigregister = _libenv.v_val_lnode_swigregister
v_val_lnode_swigregister(v_val_lnode)

class config(object):
    """
    The config class is used for the configuration of a module. By configuration we
    mean the arguments passed to a module, in command line or through the GUI.

    All the possible arguments a module are stored into a list and then can be accessed from the module
    when this one is running. For example, when you use the module `md5`, one argument
    (a path to a file) is required : you will have to add the line add()
       add("\-\-file", "Path", False, "The path to the file")
    In the previous example it indicates to the module that the parameter `\-\-file` is
    of type `Path` is mandatory (if it is not present, the module will stop). The last
    parameter is a description and is optional.

    Different types of parameters can be used, defined be the second parameter of the
    add method.

    Some constant configuration values can be added, such as the mime-type the module
    is supposed to handle (extfs, picture, etc) by calling the method :
       add_const("name", value)
    where` name` is the name of the constant and `value` its value (one more time, different
    types are handled; see the documentation of the `add_const` method).

    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _from = _swig_property(_libenv.config__from_get, _libenv.config__from_set)
    def __init__(self, *args): 
        """
        __init__(self, string _from) -> config

        The config class is used for the configuration of a module. By configuration we
        mean the arguments passed to a module, in command line or through the GUI.

        All the possible arguments a module are stored into a list and then can be accessed from the module
        when this one is running. For example, when you use the module `md5`, one argument
        (a path to a file) is required : you will have to add the line add()
           add("\-\-file", "Path", False, "The path to the file")
        In the previous example it indicates to the module that the parameter `\-\-file` is
        of type `Path` is mandatory (if it is not present, the module will stop). The last
        parameter is a description and is optional.

        Different types of parameters can be used, defined be the second parameter of the
        add method.

        Some constant configuration values can be added, such as the mime-type the module
        is supposed to handle (extfs, picture, etc) by calling the method :
           add_const("name", value)
        where` name` is the name of the constant and `value` its value (one more time, different
        types are handled; see the documentation of the `add_const` method).

        """
        _libenv.config_swiginit(self,_libenv.new_config(*args))
    descr_l = _swig_property(_libenv.config_descr_l_get, _libenv.config_descr_l_set)
    val_l = _swig_property(_libenv.config_val_l_get, _libenv.config_val_l_set)
    description = _swig_property(_libenv.config_description_get, _libenv.config_description_set)
    def add(self, *args):
        """
        add(self, string name, string type, bool opt = False, string descr = "")
        add(self, string name, string type, bool opt = False)
        add(self, string name, string type)
        add(self, string name, string type, int min, int max, bool opt = False, 
            string descr = "")
        add(self, string name, string type, int min, int max, bool opt = False)
        add(self, string name, string type, int min, int max)

        1
        """
        return _libenv.config_add(self, *args)

    def add_const(self, *args):
        """
        add_const(self, string name, string val)
        add_const(self, string name, bool val)
        add_const(self, string name, int val)
        add_const(self, string name, uint64_t val)
        add_const(self, string name, Node val)
        add_const(self, string name, Path val)
        add_const(self, string name, ListNode val)

        1
        """
        return _libenv.config_add_const(self, *args)

    __swig_destroy__ = _libenv.delete_config
config.add = new_instancemethod(_libenv.config_add,None,config)
config.add_const = new_instancemethod(_libenv.config_add_const,None,config)
config_swigregister = _libenv.config_swigregister
config_swigregister(config)

class argument(object):
    """
    The list of arguments which are passed to a module.

    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    val_m = _swig_property(_libenv.argument_val_m_get, _libenv.argument_val_m_set)
    def __init__(self, *args): 
        """
        __init__(self, string who) -> argument
        __init__(self) -> argument

        The list of arguments which are passed to a module.

        """
        _libenv.argument_swiginit(self,_libenv.new_argument(*args))
    def add_int(self, *args):
        """
        add_int(self, string arg0, int arg1)

        1
        """
        return _libenv.argument_add_int(self, *args)

    def add_uint64(self, *args):
        """
        add_uint64(self, string arg0, uint64_t arg1)

        1
        """
        return _libenv.argument_add_uint64(self, *args)

    def add_string(self, *args):
        """
        add_string(self, string arg0, string arg1)

        1
        """
        return _libenv.argument_add_string(self, *args)

    def add_bool(self, *args):
        """
        add_bool(self, string arg0, bool arg1)

        1
        """
        return _libenv.argument_add_bool(self, *args)

    def add_node(self, *args):
        """
        add_node(self, string arg0, Node arg1)

        1
        """
        return _libenv.argument_add_node(self, *args)

    def add_path(self, *args):
        """
        add_path(self, string arg0, string arg1)

        1
        """
        return _libenv.argument_add_path(self, *args)

    def add_lnode(self, *args):
        """
        add_lnode(self, string arg0, ListNode arg1)

        1
        """
        return _libenv.argument_add_lnode(self, *args)

    def get(self, *args):
        """
        get(self, string name, int v)
        get(self, string name, uint64_t v)
        get(self, string name, bool v)
        get(self, string name, Node v)
        get(self, string name, string v)
        get(self, string name, Path v)
        get(self, string name, ListNode v)

        1
        """
        return _libenv.argument_get(self, *args)

    def get_int(self, *args):
        """
        get_int(self, string name) -> int

        1
        """
        return _libenv.argument_get_int(self, *args)

    def get_uint64(self, *args):
        """
        get_uint64(self, string name) -> uint64_t

        1
        """
        return _libenv.argument_get_uint64(self, *args)

    def get_bool(self, *args):
        """
        get_bool(self, string name) -> bool

        1
        """
        return _libenv.argument_get_bool(self, *args)

    def get_string(self, *args):
        """
        get_string(self, string name) -> string

        1
        """
        return _libenv.argument_get_string(self, *args)

    def get_node(self, *args):
        """
        get_node(self, string name) -> Node

        1
        """
        return _libenv.argument_get_node(self, *args)

    def get_path(self, *args):
        """
        get_path(self, string name) -> Path

        1
        """
        return _libenv.argument_get_path(self, *args)

    def get_lnode(self, *args):
        """
        get_lnode(self, string name) -> ListNode

        1
        """
        return _libenv.argument_get_lnode(self, *args)

    __swig_destroy__ = _libenv.delete_argument
argument.add_int = new_instancemethod(_libenv.argument_add_int,None,argument)
argument.add_uint64 = new_instancemethod(_libenv.argument_add_uint64,None,argument)
argument.add_string = new_instancemethod(_libenv.argument_add_string,None,argument)
argument.add_bool = new_instancemethod(_libenv.argument_add_bool,None,argument)
argument.add_node = new_instancemethod(_libenv.argument_add_node,None,argument)
argument.add_path = new_instancemethod(_libenv.argument_add_path,None,argument)
argument.add_lnode = new_instancemethod(_libenv.argument_add_lnode,None,argument)
argument.get = new_instancemethod(_libenv.argument_get,None,argument)
argument.get_int = new_instancemethod(_libenv.argument_get_int,None,argument)
argument.get_uint64 = new_instancemethod(_libenv.argument_get_uint64,None,argument)
argument.get_bool = new_instancemethod(_libenv.argument_get_bool,None,argument)
argument.get_string = new_instancemethod(_libenv.argument_get_string,None,argument)
argument.get_node = new_instancemethod(_libenv.argument_get_node,None,argument)
argument.get_path = new_instancemethod(_libenv.argument_get_path,None,argument)
argument.get_lnode = new_instancemethod(_libenv.argument_get_lnode,None,argument)
argument_swigregister = _libenv.argument_swigregister
argument_swigregister(argument)

class results(argument):
    """
    This class, inheriting the `argument` class, is used to store the result of the
    execution of a module.

    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _from = _swig_property(_libenv.results__from_get, _libenv.results__from_set)
    def __init__(self, *args): 
        """
        __init__(self, string who) -> results

        This class, inheriting the `argument` class, is used to store the result of the
        execution of a module.

        """
        _libenv.results_swiginit(self,_libenv.new_results(*args))
    def add_const(self, *args):
        """
        add_const(self, string name, string val)
        add_const(self, string name, int val)
        add_const(self, string name, uint64_t val)
        add_const(self, string name, Node val)
        add_const(self, string name, Path val)
        add_const(self, string name, ListNode val)

        1
        """
        return _libenv.results_add_const(self, *args)

    __swig_destroy__ = _libenv.delete_results
results.add_const = new_instancemethod(_libenv.results_add_const,None,results)
results_swigregister = _libenv.results_swigregister
results_swigregister(results)

class ListDescr(object):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.ListDescr_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.ListDescr___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.ListDescr___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.ListDescr___len__(self)

    def pop(self):
        """
        pop(self) -> value_type

        1
        """
        return _libenv.ListDescr_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> ListDescr

        1
        """
        return _libenv.ListDescr___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, ListDescr v)

        1
        """
        return _libenv.ListDescr___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)

        1
        """
        return _libenv.ListDescr___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)

        1
        """
        return _libenv.ListDescr___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ListDescr
        __getitem__(self, difference_type i) -> value_type

        1
        """
        return _libenv.ListDescr___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ListDescr v)
        __setitem__(self, difference_type i, value_type x)

        1
        """
        return _libenv.ListDescr___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)

        1
        """
        return _libenv.ListDescr_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.ListDescr_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.ListDescr_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.ListDescr_clear(self)

    def swap(self, *args):
        """
        swap(self, ListDescr v)

        1
        """
        return _libenv.ListDescr_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.ListDescr_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.ListDescr_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.ListDescr_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListDescr_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListDescr_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        1
        """
        return _libenv.ListDescr_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator

        1
        """
        return _libenv.ListDescr_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ListDescr
        __init__(self, ListDescr arg0) -> ListDescr
        __init__(self, size_type size) -> ListDescr
        __init__(self, size_type size, value_type value) -> ListDescr

        1
        """
        _libenv.ListDescr_swiginit(self,_libenv.new_ListDescr(*args))
    def push_back(self, *args):
        """
        push_back(self, value_type x)

        1
        """
        return _libenv.ListDescr_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type

        1
        """
        return _libenv.ListDescr_front(self)

    def back(self):
        """
        back(self) -> value_type

        1
        """
        return _libenv.ListDescr_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)

        1
        """
        return _libenv.ListDescr_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)

        1
        """
        return _libenv.ListDescr_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)

        1
        """
        return _libenv.ListDescr_insert(self, *args)

    def pop_front(self):
        """
        pop_front(self)

        1
        """
        return _libenv.ListDescr_pop_front(self)

    def push_front(self, *args):
        """
        push_front(self, value_type x)

        1
        """
        return _libenv.ListDescr_push_front(self, *args)

    def remove(self, *args):
        """
        remove(self, value_type x)

        1
        """
        return _libenv.ListDescr_remove(self, *args)

    def unique(self):
        """
        unique(self)

        1
        """
        return _libenv.ListDescr_unique(self)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _libenv.ListDescr_reverse(self)

    def sort(self):
        """
        sort(self)

        1
        """
        return _libenv.ListDescr_sort(self)

    def merge(self, *args):
        """
        merge(self, ListDescr x)

        1
        """
        return _libenv.ListDescr_merge(self, *args)

    __swig_destroy__ = _libenv.delete_ListDescr
ListDescr.iterator = new_instancemethod(_libenv.ListDescr_iterator,None,ListDescr)
ListDescr.__nonzero__ = new_instancemethod(_libenv.ListDescr___nonzero__,None,ListDescr)
ListDescr.__bool__ = new_instancemethod(_libenv.ListDescr___bool__,None,ListDescr)
ListDescr.__len__ = new_instancemethod(_libenv.ListDescr___len__,None,ListDescr)
ListDescr.pop = new_instancemethod(_libenv.ListDescr_pop,None,ListDescr)
ListDescr.__getslice__ = new_instancemethod(_libenv.ListDescr___getslice__,None,ListDescr)
ListDescr.__setslice__ = new_instancemethod(_libenv.ListDescr___setslice__,None,ListDescr)
ListDescr.__delslice__ = new_instancemethod(_libenv.ListDescr___delslice__,None,ListDescr)
ListDescr.__delitem__ = new_instancemethod(_libenv.ListDescr___delitem__,None,ListDescr)
ListDescr.__getitem__ = new_instancemethod(_libenv.ListDescr___getitem__,None,ListDescr)
ListDescr.__setitem__ = new_instancemethod(_libenv.ListDescr___setitem__,None,ListDescr)
ListDescr.append = new_instancemethod(_libenv.ListDescr_append,None,ListDescr)
ListDescr.empty = new_instancemethod(_libenv.ListDescr_empty,None,ListDescr)
ListDescr.size = new_instancemethod(_libenv.ListDescr_size,None,ListDescr)
ListDescr.clear = new_instancemethod(_libenv.ListDescr_clear,None,ListDescr)
ListDescr.swap = new_instancemethod(_libenv.ListDescr_swap,None,ListDescr)
ListDescr.get_allocator = new_instancemethod(_libenv.ListDescr_get_allocator,None,ListDescr)
ListDescr.begin = new_instancemethod(_libenv.ListDescr_begin,None,ListDescr)
ListDescr.end = new_instancemethod(_libenv.ListDescr_end,None,ListDescr)
ListDescr.rbegin = new_instancemethod(_libenv.ListDescr_rbegin,None,ListDescr)
ListDescr.rend = new_instancemethod(_libenv.ListDescr_rend,None,ListDescr)
ListDescr.pop_back = new_instancemethod(_libenv.ListDescr_pop_back,None,ListDescr)
ListDescr.erase = new_instancemethod(_libenv.ListDescr_erase,None,ListDescr)
ListDescr.push_back = new_instancemethod(_libenv.ListDescr_push_back,None,ListDescr)
ListDescr.front = new_instancemethod(_libenv.ListDescr_front,None,ListDescr)
ListDescr.back = new_instancemethod(_libenv.ListDescr_back,None,ListDescr)
ListDescr.assign = new_instancemethod(_libenv.ListDescr_assign,None,ListDescr)
ListDescr.resize = new_instancemethod(_libenv.ListDescr_resize,None,ListDescr)
ListDescr.insert = new_instancemethod(_libenv.ListDescr_insert,None,ListDescr)
ListDescr.pop_front = new_instancemethod(_libenv.ListDescr_pop_front,None,ListDescr)
ListDescr.push_front = new_instancemethod(_libenv.ListDescr_push_front,None,ListDescr)
ListDescr.remove = new_instancemethod(_libenv.ListDescr_remove,None,ListDescr)
ListDescr.unique = new_instancemethod(_libenv.ListDescr_unique,None,ListDescr)
ListDescr.reverse = new_instancemethod(_libenv.ListDescr_reverse,None,ListDescr)
ListDescr.sort = new_instancemethod(_libenv.ListDescr_sort,None,ListDescr)
ListDescr.merge = new_instancemethod(_libenv.ListDescr_merge,None,ListDescr)
ListDescr_swigregister = _libenv.ListDescr_swigregister
ListDescr_swigregister(ListDescr)

class MapVal(object):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapVal_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.MapVal___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.MapVal___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.MapVal___len__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, key_type key) -> mapped_type

        1
        """
        return _libenv.MapVal___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key_type key)

        1
        """
        return _libenv.MapVal___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key_type key) -> bool

        1
        """
        return _libenv.MapVal_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject

        1
        """
        return _libenv.MapVal_keys(self)

    def values(self):
        """
        values(self) -> PyObject

        1
        """
        return _libenv.MapVal_values(self)

    def items(self):
        """
        items(self) -> PyObject

        1
        """
        return _libenv.MapVal_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key_type key) -> bool

        1
        """
        return _libenv.MapVal___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapVal_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapVal_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """
        __setitem__(self, key_type key, mapped_type x)

        1
        """
        return _libenv.MapVal___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(std::string)> arg0) -> MapVal
        __init__(self) -> MapVal
        __init__(self, MapVal arg0) -> MapVal

        1
        """
        _libenv.MapVal_swiginit(self,_libenv.new_MapVal(*args))
    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.MapVal_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.MapVal_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.MapVal_clear(self)

    def swap(self, *args):
        """
        swap(self, MapVal v)

        1
        """
        return _libenv.MapVal_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.MapVal_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.MapVal_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.MapVal_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.MapVal_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.MapVal_rend(self)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type

        1
        """
        return _libenv.MapVal_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)

        1
        """
        return _libenv.MapVal_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator

        1
        """
        return _libenv.MapVal_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator

        1
        """
        return _libenv.MapVal_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator

        1
        """
        return _libenv.MapVal_upper_bound(self, *args)

    __swig_destroy__ = _libenv.delete_MapVal
MapVal.iterator = new_instancemethod(_libenv.MapVal_iterator,None,MapVal)
MapVal.__nonzero__ = new_instancemethod(_libenv.MapVal___nonzero__,None,MapVal)
MapVal.__bool__ = new_instancemethod(_libenv.MapVal___bool__,None,MapVal)
MapVal.__len__ = new_instancemethod(_libenv.MapVal___len__,None,MapVal)
MapVal.__getitem__ = new_instancemethod(_libenv.MapVal___getitem__,None,MapVal)
MapVal.__delitem__ = new_instancemethod(_libenv.MapVal___delitem__,None,MapVal)
MapVal.has_key = new_instancemethod(_libenv.MapVal_has_key,None,MapVal)
MapVal.keys = new_instancemethod(_libenv.MapVal_keys,None,MapVal)
MapVal.values = new_instancemethod(_libenv.MapVal_values,None,MapVal)
MapVal.items = new_instancemethod(_libenv.MapVal_items,None,MapVal)
MapVal.__contains__ = new_instancemethod(_libenv.MapVal___contains__,None,MapVal)
MapVal.key_iterator = new_instancemethod(_libenv.MapVal_key_iterator,None,MapVal)
MapVal.value_iterator = new_instancemethod(_libenv.MapVal_value_iterator,None,MapVal)
MapVal.__setitem__ = new_instancemethod(_libenv.MapVal___setitem__,None,MapVal)
MapVal.empty = new_instancemethod(_libenv.MapVal_empty,None,MapVal)
MapVal.size = new_instancemethod(_libenv.MapVal_size,None,MapVal)
MapVal.clear = new_instancemethod(_libenv.MapVal_clear,None,MapVal)
MapVal.swap = new_instancemethod(_libenv.MapVal_swap,None,MapVal)
MapVal.get_allocator = new_instancemethod(_libenv.MapVal_get_allocator,None,MapVal)
MapVal.begin = new_instancemethod(_libenv.MapVal_begin,None,MapVal)
MapVal.end = new_instancemethod(_libenv.MapVal_end,None,MapVal)
MapVal.rbegin = new_instancemethod(_libenv.MapVal_rbegin,None,MapVal)
MapVal.rend = new_instancemethod(_libenv.MapVal_rend,None,MapVal)
MapVal.count = new_instancemethod(_libenv.MapVal_count,None,MapVal)
MapVal.erase = new_instancemethod(_libenv.MapVal_erase,None,MapVal)
MapVal.find = new_instancemethod(_libenv.MapVal_find,None,MapVal)
MapVal.lower_bound = new_instancemethod(_libenv.MapVal_lower_bound,None,MapVal)
MapVal.upper_bound = new_instancemethod(_libenv.MapVal_upper_bound,None,MapVal)
MapVal_swigregister = _libenv.MapVal_swigregister
MapVal_swigregister(MapVal)

class ListVal(object):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.ListVal_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.ListVal___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.ListVal___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.ListVal___len__(self)

    def pop(self):
        """
        pop(self) -> value_type

        1
        """
        return _libenv.ListVal_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> ListVal

        1
        """
        return _libenv.ListVal___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, ListVal v)

        1
        """
        return _libenv.ListVal___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)

        1
        """
        return _libenv.ListVal___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)

        1
        """
        return _libenv.ListVal___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ListVal
        __getitem__(self, difference_type i) -> value_type

        1
        """
        return _libenv.ListVal___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ListVal v)
        __setitem__(self, difference_type i, value_type x)

        1
        """
        return _libenv.ListVal___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)

        1
        """
        return _libenv.ListVal_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.ListVal_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.ListVal_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.ListVal_clear(self)

    def swap(self, *args):
        """
        swap(self, ListVal v)

        1
        """
        return _libenv.ListVal_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.ListVal_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.ListVal_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.ListVal_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListVal_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListVal_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        1
        """
        return _libenv.ListVal_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator

        1
        """
        return _libenv.ListVal_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ListVal
        __init__(self, ListVal arg0) -> ListVal
        __init__(self, size_type size) -> ListVal
        __init__(self, size_type size, value_type value) -> ListVal

        1
        """
        _libenv.ListVal_swiginit(self,_libenv.new_ListVal(*args))
    def push_back(self, *args):
        """
        push_back(self, value_type x)

        1
        """
        return _libenv.ListVal_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type

        1
        """
        return _libenv.ListVal_front(self)

    def back(self):
        """
        back(self) -> value_type

        1
        """
        return _libenv.ListVal_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)

        1
        """
        return _libenv.ListVal_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)

        1
        """
        return _libenv.ListVal_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)

        1
        """
        return _libenv.ListVal_insert(self, *args)

    def pop_front(self):
        """
        pop_front(self)

        1
        """
        return _libenv.ListVal_pop_front(self)

    def push_front(self, *args):
        """
        push_front(self, value_type x)

        1
        """
        return _libenv.ListVal_push_front(self, *args)

    def remove(self, *args):
        """
        remove(self, value_type x)

        1
        """
        return _libenv.ListVal_remove(self, *args)

    def unique(self):
        """
        unique(self)

        1
        """
        return _libenv.ListVal_unique(self)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _libenv.ListVal_reverse(self)

    def sort(self):
        """
        sort(self)

        1
        """
        return _libenv.ListVal_sort(self)

    def merge(self, *args):
        """
        merge(self, ListVal x)

        1
        """
        return _libenv.ListVal_merge(self, *args)

    __swig_destroy__ = _libenv.delete_ListVal
ListVal.iterator = new_instancemethod(_libenv.ListVal_iterator,None,ListVal)
ListVal.__nonzero__ = new_instancemethod(_libenv.ListVal___nonzero__,None,ListVal)
ListVal.__bool__ = new_instancemethod(_libenv.ListVal___bool__,None,ListVal)
ListVal.__len__ = new_instancemethod(_libenv.ListVal___len__,None,ListVal)
ListVal.pop = new_instancemethod(_libenv.ListVal_pop,None,ListVal)
ListVal.__getslice__ = new_instancemethod(_libenv.ListVal___getslice__,None,ListVal)
ListVal.__setslice__ = new_instancemethod(_libenv.ListVal___setslice__,None,ListVal)
ListVal.__delslice__ = new_instancemethod(_libenv.ListVal___delslice__,None,ListVal)
ListVal.__delitem__ = new_instancemethod(_libenv.ListVal___delitem__,None,ListVal)
ListVal.__getitem__ = new_instancemethod(_libenv.ListVal___getitem__,None,ListVal)
ListVal.__setitem__ = new_instancemethod(_libenv.ListVal___setitem__,None,ListVal)
ListVal.append = new_instancemethod(_libenv.ListVal_append,None,ListVal)
ListVal.empty = new_instancemethod(_libenv.ListVal_empty,None,ListVal)
ListVal.size = new_instancemethod(_libenv.ListVal_size,None,ListVal)
ListVal.clear = new_instancemethod(_libenv.ListVal_clear,None,ListVal)
ListVal.swap = new_instancemethod(_libenv.ListVal_swap,None,ListVal)
ListVal.get_allocator = new_instancemethod(_libenv.ListVal_get_allocator,None,ListVal)
ListVal.begin = new_instancemethod(_libenv.ListVal_begin,None,ListVal)
ListVal.end = new_instancemethod(_libenv.ListVal_end,None,ListVal)
ListVal.rbegin = new_instancemethod(_libenv.ListVal_rbegin,None,ListVal)
ListVal.rend = new_instancemethod(_libenv.ListVal_rend,None,ListVal)
ListVal.pop_back = new_instancemethod(_libenv.ListVal_pop_back,None,ListVal)
ListVal.erase = new_instancemethod(_libenv.ListVal_erase,None,ListVal)
ListVal.push_back = new_instancemethod(_libenv.ListVal_push_back,None,ListVal)
ListVal.front = new_instancemethod(_libenv.ListVal_front,None,ListVal)
ListVal.back = new_instancemethod(_libenv.ListVal_back,None,ListVal)
ListVal.assign = new_instancemethod(_libenv.ListVal_assign,None,ListVal)
ListVal.resize = new_instancemethod(_libenv.ListVal_resize,None,ListVal)
ListVal.insert = new_instancemethod(_libenv.ListVal_insert,None,ListVal)
ListVal.pop_front = new_instancemethod(_libenv.ListVal_pop_front,None,ListVal)
ListVal.push_front = new_instancemethod(_libenv.ListVal_push_front,None,ListVal)
ListVal.remove = new_instancemethod(_libenv.ListVal_remove,None,ListVal)
ListVal.unique = new_instancemethod(_libenv.ListVal_unique,None,ListVal)
ListVal.reverse = new_instancemethod(_libenv.ListVal_reverse,None,ListVal)
ListVal.sort = new_instancemethod(_libenv.ListVal_sort,None,ListVal)
ListVal.merge = new_instancemethod(_libenv.ListVal_merge,None,ListVal)
ListVal_swigregister = _libenv.ListVal_swigregister
ListVal_swigregister(ListVal)

class MapKey(object):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapKey_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.MapKey___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.MapKey___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.MapKey___len__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, key_type key) -> mapped_type

        1
        """
        return _libenv.MapKey___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key_type key)

        1
        """
        return _libenv.MapKey___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key_type key) -> bool

        1
        """
        return _libenv.MapKey_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject

        1
        """
        return _libenv.MapKey_keys(self)

    def values(self):
        """
        values(self) -> PyObject

        1
        """
        return _libenv.MapKey_values(self)

    def items(self):
        """
        items(self) -> PyObject

        1
        """
        return _libenv.MapKey_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key_type key) -> bool

        1
        """
        return _libenv.MapKey___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapKey_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.MapKey_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """
        __setitem__(self, key_type key, mapped_type x)

        1
        """
        return _libenv.MapKey___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(std::string)> arg0) -> MapKey
        __init__(self) -> MapKey
        __init__(self, MapKey arg0) -> MapKey

        1
        """
        _libenv.MapKey_swiginit(self,_libenv.new_MapKey(*args))
    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.MapKey_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.MapKey_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.MapKey_clear(self)

    def swap(self, *args):
        """
        swap(self, MapKey v)

        1
        """
        return _libenv.MapKey_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.MapKey_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.MapKey_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.MapKey_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.MapKey_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.MapKey_rend(self)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type

        1
        """
        return _libenv.MapKey_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)

        1
        """
        return _libenv.MapKey_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator

        1
        """
        return _libenv.MapKey_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator

        1
        """
        return _libenv.MapKey_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator

        1
        """
        return _libenv.MapKey_upper_bound(self, *args)

    __swig_destroy__ = _libenv.delete_MapKey
MapKey.iterator = new_instancemethod(_libenv.MapKey_iterator,None,MapKey)
MapKey.__nonzero__ = new_instancemethod(_libenv.MapKey___nonzero__,None,MapKey)
MapKey.__bool__ = new_instancemethod(_libenv.MapKey___bool__,None,MapKey)
MapKey.__len__ = new_instancemethod(_libenv.MapKey___len__,None,MapKey)
MapKey.__getitem__ = new_instancemethod(_libenv.MapKey___getitem__,None,MapKey)
MapKey.__delitem__ = new_instancemethod(_libenv.MapKey___delitem__,None,MapKey)
MapKey.has_key = new_instancemethod(_libenv.MapKey_has_key,None,MapKey)
MapKey.keys = new_instancemethod(_libenv.MapKey_keys,None,MapKey)
MapKey.values = new_instancemethod(_libenv.MapKey_values,None,MapKey)
MapKey.items = new_instancemethod(_libenv.MapKey_items,None,MapKey)
MapKey.__contains__ = new_instancemethod(_libenv.MapKey___contains__,None,MapKey)
MapKey.key_iterator = new_instancemethod(_libenv.MapKey_key_iterator,None,MapKey)
MapKey.value_iterator = new_instancemethod(_libenv.MapKey_value_iterator,None,MapKey)
MapKey.__setitem__ = new_instancemethod(_libenv.MapKey___setitem__,None,MapKey)
MapKey.empty = new_instancemethod(_libenv.MapKey_empty,None,MapKey)
MapKey.size = new_instancemethod(_libenv.MapKey_size,None,MapKey)
MapKey.clear = new_instancemethod(_libenv.MapKey_clear,None,MapKey)
MapKey.swap = new_instancemethod(_libenv.MapKey_swap,None,MapKey)
MapKey.get_allocator = new_instancemethod(_libenv.MapKey_get_allocator,None,MapKey)
MapKey.begin = new_instancemethod(_libenv.MapKey_begin,None,MapKey)
MapKey.end = new_instancemethod(_libenv.MapKey_end,None,MapKey)
MapKey.rbegin = new_instancemethod(_libenv.MapKey_rbegin,None,MapKey)
MapKey.rend = new_instancemethod(_libenv.MapKey_rend,None,MapKey)
MapKey.count = new_instancemethod(_libenv.MapKey_count,None,MapKey)
MapKey.erase = new_instancemethod(_libenv.MapKey_erase,None,MapKey)
MapKey.find = new_instancemethod(_libenv.MapKey_find,None,MapKey)
MapKey.lower_bound = new_instancemethod(_libenv.MapKey_lower_bound,None,MapKey)
MapKey.upper_bound = new_instancemethod(_libenv.MapKey_upper_bound,None,MapKey)
MapKey_swigregister = _libenv.MapKey_swigregister
MapKey_swigregister(MapKey)

class ListNode(object):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libenv.ListNode_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libenv.ListNode___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libenv.ListNode___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libenv.ListNode___len__(self)

    def pop(self):
        """
        pop(self) -> value_type

        1
        """
        return _libenv.ListNode_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> ListNode

        1
        """
        return _libenv.ListNode___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, ListNode v)

        1
        """
        return _libenv.ListNode___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)

        1
        """
        return _libenv.ListNode___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)

        1
        """
        return _libenv.ListNode___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ListNode
        __getitem__(self, difference_type i) -> value_type

        1
        """
        return _libenv.ListNode___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ListNode v)
        __setitem__(self, difference_type i, value_type x)

        1
        """
        return _libenv.ListNode___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)

        1
        """
        return _libenv.ListNode_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libenv.ListNode_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libenv.ListNode_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libenv.ListNode_clear(self)

    def swap(self, *args):
        """
        swap(self, ListNode v)

        1
        """
        return _libenv.ListNode_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libenv.ListNode_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libenv.ListNode_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libenv.ListNode_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListNode_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libenv.ListNode_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        1
        """
        return _libenv.ListNode_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator

        1
        """
        return _libenv.ListNode_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ListNode
        __init__(self, ListNode arg0) -> ListNode
        __init__(self, size_type size) -> ListNode
        __init__(self, size_type size, value_type value) -> ListNode

        1
        """
        _libenv.ListNode_swiginit(self,_libenv.new_ListNode(*args))
    def push_back(self, *args):
        """
        push_back(self, value_type x)

        1
        """
        return _libenv.ListNode_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type

        1
        """
        return _libenv.ListNode_front(self)

    def back(self):
        """
        back(self) -> value_type

        1
        """
        return _libenv.ListNode_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)

        1
        """
        return _libenv.ListNode_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)

        1
        """
        return _libenv.ListNode_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)

        1
        """
        return _libenv.ListNode_insert(self, *args)

    def pop_front(self):
        """
        pop_front(self)

        1
        """
        return _libenv.ListNode_pop_front(self)

    def push_front(self, *args):
        """
        push_front(self, value_type x)

        1
        """
        return _libenv.ListNode_push_front(self, *args)

    def remove(self, *args):
        """
        remove(self, value_type x)

        1
        """
        return _libenv.ListNode_remove(self, *args)

    def unique(self):
        """
        unique(self)

        1
        """
        return _libenv.ListNode_unique(self)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _libenv.ListNode_reverse(self)

    def sort(self):
        """
        sort(self)

        1
        """
        return _libenv.ListNode_sort(self)

    def merge(self, *args):
        """
        merge(self, ListNode x)

        1
        """
        return _libenv.ListNode_merge(self, *args)

    __swig_destroy__ = _libenv.delete_ListNode
ListNode.iterator = new_instancemethod(_libenv.ListNode_iterator,None,ListNode)
ListNode.__nonzero__ = new_instancemethod(_libenv.ListNode___nonzero__,None,ListNode)
ListNode.__bool__ = new_instancemethod(_libenv.ListNode___bool__,None,ListNode)
ListNode.__len__ = new_instancemethod(_libenv.ListNode___len__,None,ListNode)
ListNode.pop = new_instancemethod(_libenv.ListNode_pop,None,ListNode)
ListNode.__getslice__ = new_instancemethod(_libenv.ListNode___getslice__,None,ListNode)
ListNode.__setslice__ = new_instancemethod(_libenv.ListNode___setslice__,None,ListNode)
ListNode.__delslice__ = new_instancemethod(_libenv.ListNode___delslice__,None,ListNode)
ListNode.__delitem__ = new_instancemethod(_libenv.ListNode___delitem__,None,ListNode)
ListNode.__getitem__ = new_instancemethod(_libenv.ListNode___getitem__,None,ListNode)
ListNode.__setitem__ = new_instancemethod(_libenv.ListNode___setitem__,None,ListNode)
ListNode.append = new_instancemethod(_libenv.ListNode_append,None,ListNode)
ListNode.empty = new_instancemethod(_libenv.ListNode_empty,None,ListNode)
ListNode.size = new_instancemethod(_libenv.ListNode_size,None,ListNode)
ListNode.clear = new_instancemethod(_libenv.ListNode_clear,None,ListNode)
ListNode.swap = new_instancemethod(_libenv.ListNode_swap,None,ListNode)
ListNode.get_allocator = new_instancemethod(_libenv.ListNode_get_allocator,None,ListNode)
ListNode.begin = new_instancemethod(_libenv.ListNode_begin,None,ListNode)
ListNode.end = new_instancemethod(_libenv.ListNode_end,None,ListNode)
ListNode.rbegin = new_instancemethod(_libenv.ListNode_rbegin,None,ListNode)
ListNode.rend = new_instancemethod(_libenv.ListNode_rend,None,ListNode)
ListNode.pop_back = new_instancemethod(_libenv.ListNode_pop_back,None,ListNode)
ListNode.erase = new_instancemethod(_libenv.ListNode_erase,None,ListNode)
ListNode.push_back = new_instancemethod(_libenv.ListNode_push_back,None,ListNode)
ListNode.front = new_instancemethod(_libenv.ListNode_front,None,ListNode)
ListNode.back = new_instancemethod(_libenv.ListNode_back,None,ListNode)
ListNode.assign = new_instancemethod(_libenv.ListNode_assign,None,ListNode)
ListNode.resize = new_instancemethod(_libenv.ListNode_resize,None,ListNode)
ListNode.insert = new_instancemethod(_libenv.ListNode_insert,None,ListNode)
ListNode.pop_front = new_instancemethod(_libenv.ListNode_pop_front,None,ListNode)
ListNode.push_front = new_instancemethod(_libenv.ListNode_push_front,None,ListNode)
ListNode.remove = new_instancemethod(_libenv.ListNode_remove,None,ListNode)
ListNode.unique = new_instancemethod(_libenv.ListNode_unique,None,ListNode)
ListNode.reverse = new_instancemethod(_libenv.ListNode_reverse,None,ListNode)
ListNode.sort = new_instancemethod(_libenv.ListNode_sort,None,ListNode)
ListNode.merge = new_instancemethod(_libenv.ListNode_merge,None,ListNode)
ListNode_swigregister = _libenv.ListNode_swigregister
ListNode_swigregister(ListNode)



