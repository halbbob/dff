# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
libsearch : used to make research of nodes using matching a given pattern

"""

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _libsearch.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsearch', [dirname(__file__)])
        except ImportError:
            import _libsearch
            return _libsearch
        if fp is not None:
            try:
                _mod = imp.load_module('_libsearch', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsearch = swig_import_helper()
    del swig_import_helper
else:
    import _libsearch
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsearch.delete_SwigPyIterator
    def value(self):
        """
        value(self) -> PyObject

        1
        """
        return _libsearch.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libsearch.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(self, SwigPyIterator x) -> bool

        1
        """
        return _libsearch.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(self) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator_copy(self)

    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _libsearch.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(self) -> PyObject

        1
        """
        return _libsearch.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(self) -> PyObject

        1
        """
        return _libsearch.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, SwigPyIterator x) -> bool

        1
        """
        return _libsearch.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, SwigPyIterator x) -> bool

        1
        """
        return _libsearch.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libsearch.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_libsearch.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_libsearch.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_libsearch.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_libsearch.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_libsearch.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_libsearch.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_libsearch.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_libsearch.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_libsearch.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_libsearch.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_libsearch.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_libsearch.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_libsearch.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_libsearch.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_libsearch.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_libsearch.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _libsearch.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class algorithm(object):
    """
    This class is an interface which must be extended. It allows users to develope
    custom search algorithms.

    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def search(self, *args):
        """
        search(self, unsigned char haystack, unsigned int hslen) -> std::list<(unsigned int)>
        search(self, unsigned char haystack, unsigned int hslen, unsigned int count) -> std::list<(unsigned int)>

        1
        """
        return _libsearch.algorithm_search(self, *args)

    def preprocess(self):
        """
        preprocess(self) -> bool

        1
        """
        return _libsearch.algorithm_preprocess(self)

    def setNeedle(self, *args):
        """
        setNeedle(self, unsigned char needle) -> bool

        1
        """
        return _libsearch.algorithm_setNeedle(self, *args)

    def setNeedleSize(self, *args):
        """
        setNeedleSize(self, unsigned int size) -> bool

        1
        """
        return _libsearch.algorithm_setNeedleSize(self, *args)

    def setWildcard(self, *args):
        """
        setWildcard(self, unsigned char wildcard) -> bool

        1
        """
        return _libsearch.algorithm_setWildcard(self, *args)

    def getNeedle(self):
        """
        getNeedle(self) -> unsigned char

        1
        """
        return _libsearch.algorithm_getNeedle(self)

    def getWildcard(self):
        """
        getWildcard(self) -> unsigned char

        1
        """
        return _libsearch.algorithm_getWildcard(self)

    __swig_destroy__ = _libsearch.delete_algorithm
algorithm.search = new_instancemethod(_libsearch.algorithm_search,None,algorithm)
algorithm.preprocess = new_instancemethod(_libsearch.algorithm_preprocess,None,algorithm)
algorithm.setNeedle = new_instancemethod(_libsearch.algorithm_setNeedle,None,algorithm)
algorithm.setNeedleSize = new_instancemethod(_libsearch.algorithm_setNeedleSize,None,algorithm)
algorithm.setWildcard = new_instancemethod(_libsearch.algorithm_setWildcard,None,algorithm)
algorithm.getNeedle = new_instancemethod(_libsearch.algorithm_getNeedle,None,algorithm)
algorithm.getWildcard = new_instancemethod(_libsearch.algorithm_getWildcard,None,algorithm)
algorithm_swigregister = _libsearch.algorithm_swigregister
algorithm_swigregister(algorithm)

class Search(object):
    """
    This class is used to search patterns.

    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Search
        __init__(self, unsigned char needle, unsigned int needlesize, unsigned char wildcard) -> Search

        This class is used to search patterns.

        """
        _libsearch.Search_swiginit(self,_libsearch.new_Search(*args))
    __swig_destroy__ = _libsearch.delete_Search
    def setNeedle(self, *args):
        """
        setNeedle(self, unsigned char n) -> bool

        1
        """
        return _libsearch.Search_setNeedle(self, *args)

    def setNeedleSize(self, *args):
        """
        setNeedleSize(self, unsigned int size) -> bool

        1
        """
        return _libsearch.Search_setNeedleSize(self, *args)

    def setWildcard(self, *args):
        """
        setWildcard(self, unsigned char w) -> bool

        1
        """
        return _libsearch.Search_setWildcard(self, *args)

    def setBlockSize(self, *args):
        """
        setBlockSize(self, unsigned int bs) -> bool

        1
        """
        return _libsearch.Search_setBlockSize(self, *args)

    def setAligned(self, *args):
        """
        setAligned(self, bool aligned) -> bool

        1
        """
        return _libsearch.Search_setAligned(self, *args)

    def run(self, *args):
        """
        run(self, unsigned char haystack, unsigned int hslen) -> std::list<(unsigned int)>
        run(self, unsigned char haystack, unsigned int hslen, unsigned int count) -> std::list<(unsigned int)>

        1
        """
        return _libsearch.Search_run(self, *args)

Search.setNeedle = new_instancemethod(_libsearch.Search_setNeedle,None,Search)
Search.setNeedleSize = new_instancemethod(_libsearch.Search_setNeedleSize,None,Search)
Search.setWildcard = new_instancemethod(_libsearch.Search_setWildcard,None,Search)
Search.setBlockSize = new_instancemethod(_libsearch.Search_setBlockSize,None,Search)
Search.setAligned = new_instancemethod(_libsearch.Search_setAligned,None,Search)
Search.run = new_instancemethod(_libsearch.Search_run,None,Search)
Search_swigregister = _libsearch.Search_swigregister
Search_swigregister(Search)

HAYSTACKLEN = _libsearch.HAYSTACKLEN
UCHAR_MAX = _libsearch.UCHAR_MAX
class bmContext(object):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bcs = _swig_property(_libsearch.bmContext_bcs_get, _libsearch.bmContext_bcs_set)
    len = _swig_property(_libsearch.bmContext_len_get, _libsearch.bmContext_len_set)
    needle = _swig_property(_libsearch.bmContext_needle_get, _libsearch.bmContext_needle_set)
    wildcard = _swig_property(_libsearch.bmContext_wildcard_get, _libsearch.bmContext_wildcard_set)
    window = _swig_property(_libsearch.bmContext_window_get, _libsearch.bmContext_window_set)
    count = _swig_property(_libsearch.bmContext_count_get, _libsearch.bmContext_count_set)
    def __init__(self): 
        """
        __init__(self) -> bmContext

        1
        """
        _libsearch.bmContext_swiginit(self,_libsearch.new_bmContext())
    __swig_destroy__ = _libsearch.delete_bmContext
bmContext_swigregister = _libsearch.bmContext_swigregister
bmContext_swigregister(bmContext)

class BoyerMoore(algorithm):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BoyerMoore
        __init__(self, unsigned char needle, unsigned int needlesize, unsigned char wildcard) -> BoyerMoore

        1
        """
        _libsearch.BoyerMoore_swiginit(self,_libsearch.new_BoyerMoore(*args))
    __swig_destroy__ = _libsearch.delete_BoyerMoore
    def generateBcs(self, *args):
        """
        generateBcs(self, pattern p) -> unsigned char

        1
        """
        return _libsearch.BoyerMoore_generateBcs(self, *args)

    def search(self, *args):
        """
        search(self, unsigned char haystack, unsigned int hslen, unsigned int count) -> std::list<(unsigned int)>
        search(self, unsigned char haystack, unsigned int hslen) -> std::list<(unsigned int)>
        search(self, unsigned char haystack, unsigned int len, pattern p, 
            unsigned char bcs) -> int

        1
        """
        return _libsearch.BoyerMoore_search(self, *args)

BoyerMoore.generateBcs = new_instancemethod(_libsearch.BoyerMoore_generateBcs,None,BoyerMoore)
BoyerMoore.search = new_instancemethod(_libsearch.BoyerMoore_search,None,BoyerMoore)
BoyerMoore_swigregister = _libsearch.BoyerMoore_swigregister
BoyerMoore_swigregister(BoyerMoore)

class Listui64(object):
    """1"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libsearch.Listui64_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libsearch.Listui64___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libsearch.Listui64___bool__(self)

    def __len__(self):
        """
        __len__(self) -> std::list<(unsigned long long)>::size_type

        1
        """
        return _libsearch.Listui64___len__(self)

    def pop(self):
        """
        pop(self) -> std::list<(unsigned long long)>::value_type

        1
        """
        return _libsearch.Listui64_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, std::list<(unsigned long long)>::difference_type i, 
            std::list<(unsigned long long)>::difference_type j) -> Listui64

        1
        """
        return _libsearch.Listui64___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::list<(unsigned long long)>::difference_type i, 
            std::list<(unsigned long long)>::difference_type j, 
            Listui64 v)

        1
        """
        return _libsearch.Listui64___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, std::list<(unsigned long long)>::difference_type i, 
            std::list<(unsigned long long)>::difference_type j)

        1
        """
        return _libsearch.Listui64___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::list<(unsigned long long)>::difference_type i)
        __delitem__(self, PySliceObject slice)

        1
        """
        return _libsearch.Listui64___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> Listui64
        __getitem__(self, std::list<(unsigned long long)>::difference_type i) -> std::list<(unsigned long long)>::value_type

        1
        """
        return _libsearch.Listui64___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, Listui64 v)
        __setitem__(self, std::list<(unsigned long long)>::difference_type i, 
            std::list<(unsigned long long)>::value_type x)

        1
        """
        return _libsearch.Listui64___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, std::list<(unsigned long long)>::value_type x)

        1
        """
        return _libsearch.Listui64_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libsearch.Listui64_empty(self)

    def size(self):
        """
        size(self) -> std::list<(unsigned long long)>::size_type

        1
        """
        return _libsearch.Listui64_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libsearch.Listui64_clear(self)

    def swap(self, *args):
        """
        swap(self, Listui64 v)

        1
        """
        return _libsearch.Listui64_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> std::list<(unsigned long long)>::allocator_type

        1
        """
        return _libsearch.Listui64_get_allocator(self)

    def begin(self):
        """
        begin(self) -> std::list<(unsigned long long)>::const_iterator

        1
        """
        return _libsearch.Listui64_begin(self)

    def end(self):
        """
        end(self) -> std::list<(unsigned long long)>::const_iterator

        1
        """
        return _libsearch.Listui64_end(self)

    def rbegin(self):
        """
        rbegin(self) -> std::list<(unsigned long long)>::const_reverse_iterator

        1
        """
        return _libsearch.Listui64_rbegin(self)

    def rend(self):
        """
        rend(self) -> std::list<(unsigned long long)>::const_reverse_iterator

        1
        """
        return _libsearch.Listui64_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        1
        """
        return _libsearch.Listui64_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::list<(unsigned long long)>::iterator pos) -> std::list<(unsigned long long)>::iterator
        erase(self, std::list<(unsigned long long)>::iterator first, std::list<(unsigned long long)>::iterator last) -> std::list<(unsigned long long)>::iterator

        1
        """
        return _libsearch.Listui64_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Listui64
        __init__(self, Listui64 arg0) -> Listui64
        __init__(self, std::list<(unsigned long long)>::size_type size) -> Listui64
        __init__(self, std::list<(unsigned long long)>::size_type size, std::list<(unsigned long long)>::value_type value) -> Listui64

        1
        """
        _libsearch.Listui64_swiginit(self,_libsearch.new_Listui64(*args))
    def push_back(self, *args):
        """
        push_back(self, std::list<(unsigned long long)>::value_type x)

        1
        """
        return _libsearch.Listui64_push_back(self, *args)

    def front(self):
        """
        front(self) -> std::list<(unsigned long long)>::value_type

        1
        """
        return _libsearch.Listui64_front(self)

    def back(self):
        """
        back(self) -> std::list<(unsigned long long)>::value_type

        1
        """
        return _libsearch.Listui64_back(self)

    def assign(self, *args):
        """
        assign(self, std::list<(unsigned long long)>::size_type n, std::list<(unsigned long long)>::value_type x)

        1
        """
        return _libsearch.Listui64_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::list<(unsigned long long)>::size_type new_size)
        resize(self, std::list<(unsigned long long)>::size_type new_size, 
            std::list<(unsigned long long)>::value_type x)

        1
        """
        return _libsearch.Listui64_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::list<(unsigned long long)>::iterator pos, std::list<(unsigned long long)>::value_type x) -> std::list<(unsigned long long)>::iterator
        insert(self, std::list<(unsigned long long)>::iterator pos, std::list<(unsigned long long)>::size_type n, 
            std::list<(unsigned long long)>::value_type x)

        1
        """
        return _libsearch.Listui64_insert(self, *args)

    def pop_front(self):
        """
        pop_front(self)

        1
        """
        return _libsearch.Listui64_pop_front(self)

    def push_front(self, *args):
        """
        push_front(self, std::list<(unsigned long long)>::value_type x)

        1
        """
        return _libsearch.Listui64_push_front(self, *args)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _libsearch.Listui64_reverse(self)

    __swig_destroy__ = _libsearch.delete_Listui64
Listui64.iterator = new_instancemethod(_libsearch.Listui64_iterator,None,Listui64)
Listui64.__nonzero__ = new_instancemethod(_libsearch.Listui64___nonzero__,None,Listui64)
Listui64.__bool__ = new_instancemethod(_libsearch.Listui64___bool__,None,Listui64)
Listui64.__len__ = new_instancemethod(_libsearch.Listui64___len__,None,Listui64)
Listui64.pop = new_instancemethod(_libsearch.Listui64_pop,None,Listui64)
Listui64.__getslice__ = new_instancemethod(_libsearch.Listui64___getslice__,None,Listui64)
Listui64.__setslice__ = new_instancemethod(_libsearch.Listui64___setslice__,None,Listui64)
Listui64.__delslice__ = new_instancemethod(_libsearch.Listui64___delslice__,None,Listui64)
Listui64.__delitem__ = new_instancemethod(_libsearch.Listui64___delitem__,None,Listui64)
Listui64.__getitem__ = new_instancemethod(_libsearch.Listui64___getitem__,None,Listui64)
Listui64.__setitem__ = new_instancemethod(_libsearch.Listui64___setitem__,None,Listui64)
Listui64.append = new_instancemethod(_libsearch.Listui64_append,None,Listui64)
Listui64.empty = new_instancemethod(_libsearch.Listui64_empty,None,Listui64)
Listui64.size = new_instancemethod(_libsearch.Listui64_size,None,Listui64)
Listui64.clear = new_instancemethod(_libsearch.Listui64_clear,None,Listui64)
Listui64.swap = new_instancemethod(_libsearch.Listui64_swap,None,Listui64)
Listui64.get_allocator = new_instancemethod(_libsearch.Listui64_get_allocator,None,Listui64)
Listui64.begin = new_instancemethod(_libsearch.Listui64_begin,None,Listui64)
Listui64.end = new_instancemethod(_libsearch.Listui64_end,None,Listui64)
Listui64.rbegin = new_instancemethod(_libsearch.Listui64_rbegin,None,Listui64)
Listui64.rend = new_instancemethod(_libsearch.Listui64_rend,None,Listui64)
Listui64.pop_back = new_instancemethod(_libsearch.Listui64_pop_back,None,Listui64)
Listui64.erase = new_instancemethod(_libsearch.Listui64_erase,None,Listui64)
Listui64.push_back = new_instancemethod(_libsearch.Listui64_push_back,None,Listui64)
Listui64.front = new_instancemethod(_libsearch.Listui64_front,None,Listui64)
Listui64.back = new_instancemethod(_libsearch.Listui64_back,None,Listui64)
Listui64.assign = new_instancemethod(_libsearch.Listui64_assign,None,Listui64)
Listui64.resize = new_instancemethod(_libsearch.Listui64_resize,None,Listui64)
Listui64.insert = new_instancemethod(_libsearch.Listui64_insert,None,Listui64)
Listui64.pop_front = new_instancemethod(_libsearch.Listui64_pop_front,None,Listui64)
Listui64.push_front = new_instancemethod(_libsearch.Listui64_push_front,None,Listui64)
Listui64.reverse = new_instancemethod(_libsearch.Listui64_reverse,None,Listui64)
Listui64_swigregister = _libsearch.Listui64_swigregister
Listui64_swigregister(Listui64)



